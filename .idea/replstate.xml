<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1432870440053">{:repl-history {:ide [], :local [&quot;(prn )&quot; &quot;(prn (http/get \&quot;http://testing.magicfaster.com:8000/v1/viq/rep-meetings\&quot;\n          {:cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}}))&quot; &quot;(printlin (http/get \&quot;http://testing.magicfaster.com:8000/v1/viq/rep-meetings\&quot;\n          {:cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}}))&quot; &quot;(println (http/get \&quot;http://testing.magicfaster.com:8000/v1/viq/rep-meetings\&quot;\n          {:cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}}))&quot; &quot;(http/get \&quot;http://testing.magicfaster.com:8000/v1/viq/rep-meetings\&quot;\n          {:cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})&quot; &quot;(ns user\n  (:require [reloaded.repl :refer [system init start stop go reset]]\n            [msg-ops.system :refer [prod-system]]))&quot; &quot;(reloaded.repl/set-init! prod-system)\n&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [clj-http.client :as http]))\n\n(defn seed-opp\n  [name account-id]\n  {:Name                                 name\n   :AccountId                            account-id\n   :StageName                            \&quot;In Play\&quot;\n   :CloseDate                            (java.util.Date.)\n   :First_Meeting_Date__c                (java.util.Date.)\n   :First_Meeting_Time__c                \&quot;9:00AM\&quot;\n   :First_Meeting_Time_Zone__c           \&quot;ET\&quot;\n   :Use_Rest_Address_for_Mtg_Location__c true\n   :Current_Offer_Status__c              \&quot;Sent\&quot;\n   :Current_Offer_Vendor__c              \&quot;a00i000000YGt0H\&quot;\n   :Vendor__c                            \&quot;a00i000000YGt0H\&quot;})\n\n(def seed-data\n  [(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)\n\n   (seed-opp \&quot;Boise Test\&quot; \&quot;001i000001R5mXg\&quot;)])\n\n(defn soql-in\n  [xs]\n  (-&gt;&gt; (seq xs)\n       (map #(str \&quot;'\&quot; % \&quot;'\&quot;))\n       (str/join \&quot;, \&quot;)\n       (format \&quot;(%s)\&quot;)))\n\n(defn query\n  [salesforce query]\n  (sf/request\n    salesforce\n    {:uri \&quot;/services/data/v33.0/query\&quot;\n     :query-params\n          {\&quot;q\&quot; query}}))\n\n(defn opps-for-accounts-q\n  [accounts]\n  (format\n    \&quot;SELECT Id\n     FROM Opportunity\n     WHERE AccountId IN %s\&quot;\n    (soql-in accounts)))\n\n(defn opps-for-accounts\n  [{:keys [salesforce]} accounts]\n  (-&gt;&gt; (query salesforce\n              (opps-for-accounts-q accounts))\n       :records))\n\n(defn delete-opp!\n  [salesforce opp]\n  (sf/request salesforce\n              {:uri    (-&gt; opp :attributes :url)\n               :method :delete}))\n\n(defn delete-opps!\n  [{:keys [salesforce]} opps]\n  (let [futures (doall (map #(future (delete-opp! salesforce %)) opps))]\n    (doseq [f futures] @f)\n    true))\n\n(defn create-opp!\n  [rfqa record]\n  (sf/request (:salesforce rfqa)\n              {:uri    \&quot;/services/data/v33.0/sobjects/Opportunity\&quot;\n               :method :post\n               :body   record}))\n\n(defn get-old-sfids\n  [{:keys [salesforce]}]\n  )\n\n(defrecord RainforestQA [salesforce]\n  bidi/RouteProvider\n  (routes [this]\n    [\&quot;/\&quot; {\&quot;rainforest-hook\&quot; (fn [_] {:status 200\n                                     :body   \&quot;meme\&quot;})\n\n          }]))\n\n\n(defn new-hook []\n  (map-&gt;RainforestQA {}))\n\n\n(comment (do\n\n           (def rfqa #(:rainforest-hook reloaded.repl/system))\n\n           ;; delete\n           (-&gt;&gt; (opps-for-accounts (rfqa)\n                                   [\&quot;001i000001R5ls2\&quot;\n                                    \&quot;001i000001R5mXg\&quot;])\n                (delete-opps! (rfqa)))\n\n           ;; create\n           (create-opp! (rfqa)\n                        (second seed-data))\n\n           ;; Assign\n           (http/post \&quot;http://testing.magicfaster.com:8000/v1/events/viq/vp-assign-rep\&quot;\n                      {:form-params {\&quot;opportunitySfid\&quot; \&quot;006i000000WfSJAAA3\&quot;\n                                     \&quot;vendorRepSfid\&quot; \&quot;003i0000020FtpIAAS\&quot;}\n                       :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n                       :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})\n\n\n           ))\n\n&quot; &quot;(http/get \&quot;testing.magicfaster.com:8000/v1/viq/vp-opportunities?status=Accepted\&quot;\n          {:cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})&quot; &quot;(http/post \&quot;http://testing.magicfaster.com:8000/v1/events/viq/vp-assign-rep\&quot;\n           {:form-params {\&quot;opportunitySfid\&quot; \&quot;006i000000WfSJAAA3\&quot;\n                          \&quot;vendorRepSfid\&quot; \&quot;003i0000020FtpIAAS\&quot;}\n            :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n            :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})\n&quot; &quot;(-&gt;&gt; (opps-for-accounts (rfqa)\n                        [\&quot;001i000001R5ls2\&quot;\n                         \&quot;001i000001R5mXg\&quot;])\n     (delete-opps! (rfqa)))\n\n;; create\n(create-opp! (rfqa)\n             (second seed-data))&quot; &quot;(http/put \&quot;http://testing.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n          {:headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n           :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                     :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n           :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})&quot; &quot;(ns msg-ops.system\n  (:require [clojure.java.io :as io]\n            [com.stuartsierra.component :as component]\n            [modular.bidi]\n            [modular.http-kit]\n            [msg-ops.components.rainforestqa]\n            [me.raynes.fs :as fs]\n            [system.core :refer [defsystem]]\n            [tvanhens.utils :refer [defcreds]]))\n\n(defcreds creds \&quot;~/.msg-secret.edn\&quot;)\n\n(defsystem prod-system\n           [:http-server\n            (component/using\n              (modular.http-kit/new-webserver)\n              [:bidi-router])\n\n            :bidi-router\n            (component/using\n              (modular.bidi/new-router)\n              [:rainforest-hook])\n\n            :rainforest-hook\n            (component/using\n              (msg-ops.components.rainforestqa/new-hook)\n              [:salesforce :msg-auth])\n\n            :salesforce\n            {:creds (:salesforce (creds))\n             :auth  (atom nil)}\n\n            :msg-auth\n            {:creds (:msg-auth (creds))}])\n&quot; &quot;(ns user\n  (:require [reloaded.repl :refer [system init start stop go reset]]\n            [msg-ops.system :refer [prod-system]]))\n\n(reloaded.repl/set-init! prod-system)\n&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [org.httpkit.client :as http]))\n\n(defn seed-opp\n  [name account-id]\n  {:Name                                 name\n   :AccountId                            account-id\n   :StageName                            \&quot;In Play\&quot;\n   :CloseDate                            (java.util.Date.)\n   :First_Meeting_Date__c                (java.util.Date.)\n   :First_Meeting_Time__c                \&quot;9:00AM\&quot;\n   :First_Meeting_Time_Zone__c           \&quot;ET\&quot;\n   :Use_Rest_Address_for_Mtg_Location__c true\n   :Current_Offer_Status__c              \&quot;Sent\&quot;\n   :Current_Offer_Vendor__c              \&quot;a00i000000YGt0H\&quot;\n   :Vendor__c                            \&quot;a00i000000YGt0H\&quot;})\n\n(def seed-data\n  [(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)\n\n   (seed-opp \&quot;Boise Test\&quot; \&quot;001i000001R5mXg\&quot;)])\n\n(defn soql-in\n  [xs]\n  (-&gt;&gt; (seq xs)\n       (map #(str \&quot;'\&quot; % \&quot;'\&quot;))\n       (str/join \&quot;, \&quot;)\n       (format \&quot;(%s)\&quot;)))\n\n(defn query\n  [salesforce query]\n  (sf/request\n    salesforce\n    {:uri \&quot;/services/data/v33.0/query\&quot;\n     :query-params\n          {\&quot;q\&quot; query}}))\n\n(defn opps-for-accounts-q\n  [accounts]\n  (format\n    \&quot;SELECT Id\n     FROM Opportunity\n     WHERE AccountId IN %s\&quot;\n    (soql-in accounts)))\n\n(defn opps-for-accounts\n  [{:keys [salesforce]} accounts]\n  (-&gt;&gt; (query salesforce\n              (opps-for-accounts-q accounts))\n       :records))\n\n(defn delete-opp!\n  [salesforce opp]\n  (sf/request salesforce\n              {:uri    (-&gt; opp :attributes :url)\n               :method :delete}))\n\n(defn delete-opps!\n  [{:keys [salesforce]} opps]\n  (let [futures (doall (map #(future (delete-opp! salesforce %)) opps))]\n    (doseq [f futures] @f)\n    true))\n\n(defn create-opp!\n  [rfqa record]\n  (sf/request (:salesforce rfqa)\n              {:uri    \&quot;/services/data/v33.0/sobjects/Opportunity\&quot;\n               :method :post\n               :body   record}))\n\n(defn get-old-sfids\n  [{:keys [salesforce]}]\n  )\n\n(defrecord RainforestQA [salesforce]\n  bidi/RouteProvider\n  (routes [this]\n    [\&quot;/\&quot; {\&quot;rainforest-hook\&quot; (fn [_] {:status 200\n                                     :body   \&quot;meme\&quot;})\n\n          }]))\n\n\n(defn new-hook []\n  (map-&gt;RainforestQA {}))\n\n\n(comment (do\n\n           (def rfqa #(:rainforest-hook reloaded.repl/system))\n\n           ;; delete\n           (-&gt;&gt; (opps-for-accounts (rfqa)\n                                   [\&quot;001i000001R5ls2\&quot;\n                                    \&quot;001i000001R5mXg\&quot;])\n                (delete-opps! (rfqa)))\n\n           ;; create\n           (create-opp! (rfqa)\n                        (second seed-data))\n\n           ;; Assign\n           (http/put \&quot;http://api.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n                     {:headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n                      :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n                      :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})\n\n           (http/request\n             {:url    \&quot;http://api.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n              :method :put\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n              :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                        :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n              :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})\n\n           ))\n\n\n&quot; &quot;(http/request\n  {:url    \&quot;http://api.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n   :method :put\n   :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n   :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n             :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n   :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})&quot; &quot;(http/put \&quot;http://api.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n          {:headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n           :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                     :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n           :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})&quot; &quot;(client/put \&quot;http://api.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n            {:headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n             :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                       :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n             :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})&quot; &quot;(http/request\n  {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n   :method  :put\n   :as      :text\n   :insecure? true\n   :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n             \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n             \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n   :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n             :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})&quot; &quot;(def req (http/request\n         {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n          :method  :put\n          :as      :text\n          :insecure? true\n          :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                    \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                    \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n          :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                    :managerSfid \&quot;003i0000020FtpIAAS\&quot;}}))&quot; &quot;(http/request\n  {:url     \&quot;http://testing.magicfaster.com:8000/v2/opportunities/001i000001R5mXg\&quot;\n   :method  :put\n   :as      :text\n   :insecure? true\n   :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n             \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n             \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n   :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n             :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})&quot; &quot;(http/request\n  {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities?unassigned=true\&quot;\n   :method  :get\n   :as      :text\n   :insecure? true\n   :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n             \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n             \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}})&quot; &quot;(def req (http/request\n           {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities?unassigned=true\&quot;\n            :method  :get\n            :as      :text\n            :insecure? true\n            :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                      \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                      \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}}))&quot; &quot;req&quot; &quot;@req&quot; &quot;\n(http/request\n  {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities?unassigned=true\&quot;\n   :method  :get\n   :as      :text\n   :insecure? true\n   :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n             \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n             \&quot;cookie\&quot;       \&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;}})\n\n&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities?unassigned=true\&quot;\n    :method  :get\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       \&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;}})\n\n&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities?unassigned=true\&quot;\n    :method  :get\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;msg-auth\&quot;       \&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;}})\n\n&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities?unassigned=true\&quot;\n    :method  :get\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;}\n    :cookies \&quot;msg-auth\&quot;       \&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;})\n\n&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com:8000/v2/opportunities?unassigned=true\&quot;\n    :method  :get\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;}\n    :cookies {\&quot;msg-auth\&quot; \&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;}})\n\n&quot; &quot;@(http/request\n   {:url     \&quot;https://api.magicfaster.com/v1/viq/rep-meetings\&quot;\n    :method  :get\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;}\n    :cookies {\&quot;msg-auth\&quot; \&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;}})\n\n&quot; &quot;@(http/request\n   {:url     \&quot;https://api.magicfaster.com/v1/viq/rep-meetings\&quot;\n    :method  :get\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookies\&quot;\&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;}})\n\n&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n              :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})\n&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {\&quot;coordinatorSfid\&quot; \&quot;003i0000020FtpIAAS\&quot;\n              \&quot;managerSfid\&quot; \&quot;003i0000020FtpIAAS\&quot;}})&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    \&quot;{:coordinatorSfid \\\&quot;003i0000020FtpIAAS\\\&quot;\n                        :managerSfid \\\&quot;003i0000020FtpIAAS\\\&quot;}\&quot;})&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n              :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})&quot; &quot;(pr-str {:a 1})&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                      :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                      :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n&quot; &quot;@(http/request\n   {:url     \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n              :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})\n&quot; &quot;@(http/request\n   {:url     \&quot;https://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n              :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})\n&quot; &quot;@(https/request\n   {:url     \&quot;https://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n              :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})\n&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [org.httpkit.client :as http]\n            [clj-http.client :as client]))&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [org.httpkit.client :as http]\n            [clj-http.client :as client]))\n\n(defn seed-opp\n  [name account-id]\n  {:Name                                 name\n   :AccountId                            account-id\n   :StageName                            \&quot;In Play\&quot;\n   :CloseDate                            (java.util.Date.)\n   :First_Meeting_Date__c                (java.util.Date.)\n   :First_Meeting_Time__c                \&quot;9:00AM\&quot;\n   :First_Meeting_Time_Zone__c           \&quot;ET\&quot;\n   :Use_Rest_Address_for_Mtg_Location__c true\n   :Current_Offer_Status__c              \&quot;Sent\&quot;\n   :Current_Offer_Vendor__c              \&quot;a00i000000YGt0H\&quot;\n   :Vendor__c                            \&quot;a00i000000YGt0H\&quot;})\n\n(def seed-data\n  [(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)\n\n   (seed-opp \&quot;Boise Test\&quot; \&quot;001i000001R5mXg\&quot;)])\n\n(defn soql-in\n  [xs]\n  (-&gt;&gt; (seq xs)\n       (map #(str \&quot;'\&quot; % \&quot;'\&quot;))\n       (str/join \&quot;, \&quot;)\n       (format \&quot;(%s)\&quot;)))\n\n(defn query\n  [salesforce query]\n  (sf/request\n    salesforce\n    {:uri \&quot;/services/data/v33.0/query\&quot;\n     :query-params\n          {\&quot;q\&quot; query}}))\n\n(defn opps-for-accounts-q\n  [accounts]\n  (format\n    \&quot;SELECT Id\n     FROM Opportunity\n     WHERE AccountId IN %s\&quot;\n    (soql-in accounts)))\n\n(defn opps-for-accounts\n  [{:keys [salesforce]} accounts]\n  (-&gt;&gt; (query salesforce\n              (opps-for-accounts-q accounts))\n       :records))\n\n(defn delete-opp!\n  [salesforce opp]\n  (sf/request salesforce\n              {:uri    (-&gt; opp :attributes :url)\n               :method :delete}))\n\n(defn delete-opps!\n  [{:keys [salesforce]} opps]\n  (let [futures (doall (map #(future (delete-opp! salesforce %)) opps))]\n    (doseq [f futures] @f)\n    true))\n\n(defn create-opp!\n  [rfqa record]\n  (sf/request (:salesforce rfqa)\n              {:uri    \&quot;/services/data/v33.0/sobjects/Opportunity\&quot;\n               :method :post\n               :body   record}))\n\n(defn get-old-sfids\n  [{:keys [salesforce]}]\n  )\n\n(defrecord RainforestQA [salesforce]\n  bidi/RouteProvider\n  (routes [this]\n    [\&quot;/\&quot; {\&quot;rainforest-hook\&quot; (fn [_] {:status 200\n                                     :body   \&quot;meme\&quot;})\n\n          }]))\n\n\n(defn new-hook []\n  (map-&gt;RainforestQA {}))\n\n\n(comment (do\n\n           (def rfqa #(:rainforest-hook reloaded.repl/system))\n\n           ;; delete\n           (-&gt;&gt; (opps-for-accounts (rfqa)\n                                   [\&quot;001i000001R5ls2\&quot;\n                                    \&quot;001i000001R5mXg\&quot;])\n                (delete-opps! (rfqa)))\n\n           ;; create\n           (create-opp! (rfqa)\n                        (second seed-data))\n\n           ;; Assign\n           @(client/put \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n                        {:headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n                         :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                   :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n                         :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})\n\n           @(http/request\n              {:url     \&quot;https://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n               :method  :put\n               :as      :text\n               :insecure? true\n               :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                         \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                         \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n               :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                         :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})\n\n\n           @(http/request\n              {:url     \&quot;https://api.magicfaster.com/v1/viq/rep-meetings\&quot;\n               :method  :get\n               :as      :text\n               :insecure? true\n               :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                         \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                         \&quot;cookies\&quot;\&quot;eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXUyJ9.eyJzdHJhdGVneSI6ImNvb2tpZSIsInJvbGVzIjpbInZlbmRvci1yZXAiLCJ2ZW5kb3ItdnAtc2FsZXMiXSwiZW1haWwiOiJkaHJ1dmErdnBAbWFpbnN0cmVldGdlbm9tZS5jb20iLCJpYXQiOjE0MzIyNTgwNjJ9.MEUCIQCKFQ4ZHWrxVQhbPh6bcu5J51bXmK2Oi1WHW63OD6mhMwIgT54jf8Ch8wWrY8Rz8F3oTE3rtD7ZHnp-skWDq_5_n5g\&quot;}})\n\n\n\n           ))\n&quot; &quot;@(client/put \&quot;http://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n             {:headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;}\n              :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                        :managerSfid \&quot;003i0000020FtpIAAS\&quot;}\n              :cookies {\&quot;msg-auth\&quot; (:creds (:msg-auth (rfqa)))}})\n&quot; &quot;@(http/request\n   {:url     \&quot;https://testing.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n              :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})&quot; &quot;@(http/request\n   {:url     \&quot;https://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n              :managerSfid \&quot;003i0000020FtpIAAS\&quot;}})&quot; &quot;;; delete\n(-&gt;&gt; (opps-for-accounts (rfqa)\n                        [\&quot;001i000001R5ls2\&quot;\n                         \&quot;001i000001R5mXg\&quot;])\n     (delete-opps! (rfqa)))\n\n;; create\n(create-opp! (rfqa)\n             (second seed-data))\n&quot; &quot;@(http/request\n   {:url     \&quot;https://api.magicfaster.com/v2/opportunities/001i000001R5mXg\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                      :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})&quot; &quot;(create-opp! (rfqa)\n             (second seed-data))&quot; &quot;@(http/request\n   {:url     \&quot;https://api.magicfaster.com/v2/opportunities/006i000000Wfd2TAAR\&quot;\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                      :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})&quot; &quot;;; create\n(:id (create-opp! (rfqa)\n                  (second seed-data)))&quot; &quot;@(http/request\n   {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;(:id (create-opp! (rfqa)\n                                                                                   (second seed-data))))\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                      :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})&quot; &quot;(user/reset)&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [org.httpkit.client :as http]))\n\n(defn seed-opp\n  [name account-id]\n  {:Name                                 name\n   :AccountId                            account-id\n   :StageName                            \&quot;In Play\&quot;\n   :CloseDate                            (java.util.Date.)\n   :First_Meeting_Date__c                (java.util.Date.)\n   :First_Meeting_Time__c                \&quot;9:00AM\&quot;\n   :First_Meeting_Time_Zone__c           \&quot;ET\&quot;\n   :Use_Rest_Address_for_Mtg_Location__c true\n   :Current_Offer_Status__c              \&quot;Sent\&quot;\n   :Current_Offer_Vendor__c              \&quot;a00i000000YGt0H\&quot;\n   :Vendor__c                            \&quot;a00i000000YGt0H\&quot;})\n\n(def seed-data\n  [(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)\n\n   (seed-opp \&quot;Boise Test\&quot; \&quot;001i000001R5mXg\&quot;)])\n\n(defn soql-in\n  [xs]\n  (-&gt;&gt; (seq xs)\n       (map #(str \&quot;'\&quot; % \&quot;'\&quot;))\n       (str/join \&quot;, \&quot;)\n       (format \&quot;(%s)\&quot;)))\n\n(defn query\n  [salesforce query]\n  (sf/request\n    salesforce\n    {:uri \&quot;/services/data/v33.0/query\&quot;\n     :query-params\n          {\&quot;q\&quot; query}}))\n\n(defn opps-for-accounts-q\n  [accounts]\n  (format\n    \&quot;SELECT Id\n     FROM Opportunity\n     WHERE AccountId IN %s\&quot;\n    (soql-in accounts)))\n\n(defn opps-for-accounts\n  [{:keys [salesforce]} accounts]\n  (-&gt;&gt; (query salesforce\n              (opps-for-accounts-q accounts))\n       :records))\n\n(defn delete-opp!\n  [salesforce opp]\n  (sf/request salesforce\n              {:uri    (-&gt; opp :attributes :url)\n               :method :delete}))\n\n(defn delete-opps!\n  [{:keys [salesforce]} opps]\n  (let [futures (doall (map #(future (delete-opp! salesforce %)) opps))]\n    (doseq [f futures] @f)\n    true))\n\n(defn create-opp!\n  [rfqa record]\n  (sf/request (:salesforce rfqa)\n              {:uri    \&quot;/services/data/v33.0/sobjects/Opportunity\&quot;\n               :method :post\n               :body   record}))\n\n(defn get-old-sfids\n  [{:keys [salesforce]}]\n  )\n\n(defrecord RainforestQA [salesforce]\n  bidi/RouteProvider\n  (routes [this]\n    [\&quot;/\&quot; {\&quot;rainforest-hook\&quot; (fn [_] {:status 200\n                                     :body   \&quot;meme\&quot;})\n\n          }]))\n\n\n(defn new-hook []\n  (map-&gt;RainforestQA {}))\n\n\n(comment\n  (def rfqa #(:rainforest-hook reloaded.repl/system))\n\n  ;; delete\n  (-&gt;&gt; (opps-for-accounts (rfqa)\n                          [\&quot;001i000001R5ls2\&quot;\n                           \&quot;001i000001R5mXg\&quot;])\n       (delete-opps! (rfqa)))\n\n  ;; create\n  (def id (:id (create-opp! (rfqa)\n                            (second seed-data))))\n\n  @(http/request\n     {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n      :method  :put\n      :as      :text\n      :insecure? true\n      :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n      :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                        :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n\n  )\n&quot; &quot;(defn test [_] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          @(http/request\n             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n              :method  :put\n              :as      :text\n              :insecure? true\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})))&quot; &quot;(test)&quot; &quot;(defn tester [_] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          @(http/request\n             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n              :method  :put\n              :as      :text\n              :insecure? true\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          @(http/request\n             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n              :method  :put\n              :as      :text\n              :insecure? true\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          teste (prn \&quot;CREATE\&quot;)\n\n\n          @(http/request\n             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n              :method  :put\n              :as      :text\n              :insecure? true\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})))&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [org.httpkit.client :as http]))\n\n(defn seed-opp\n  [name account-id]\n  {:Name                                 name\n   :AccountId                            account-id\n   :StageName                            \&quot;In Play\&quot;\n   :CloseDate                            (java.util.Date.)\n   :First_Meeting_Date__c                (java.util.Date.)\n   :First_Meeting_Time__c                \&quot;9:00AM\&quot;\n   :First_Meeting_Time_Zone__c           \&quot;ET\&quot;\n   :Use_Rest_Address_for_Mtg_Location__c true\n   :Current_Offer_Status__c              \&quot;Sent\&quot;\n   :Current_Offer_Vendor__c              \&quot;a00i000000YGt0H\&quot;\n   :Vendor__c                            \&quot;a00i000000YGt0H\&quot;})\n\n(def seed-data\n  [(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)\n\n   (seed-opp \&quot;Boise Test\&quot; \&quot;001i000001R5mXg\&quot;)])\n\n(defn soql-in\n  [xs]\n  (-&gt;&gt; (seq xs)\n       (map #(str \&quot;'\&quot; % \&quot;'\&quot;))\n       (str/join \&quot;, \&quot;)\n       (format \&quot;(%s)\&quot;)))\n\n(defn query\n  [salesforce query]\n  (sf/request\n    salesforce\n    {:uri \&quot;/services/data/v33.0/query\&quot;\n     :query-params\n          {\&quot;q\&quot; query}}))\n\n(defn opps-for-accounts-q\n  [accounts]\n  (format\n    \&quot;SELECT Id\n     FROM Opportunity\n     WHERE AccountId IN %s\&quot;\n    (soql-in accounts)))\n\n(defn opps-for-accounts\n  [{:keys [salesforce]} accounts]\n  (-&gt;&gt; (query salesforce\n              (opps-for-accounts-q accounts))\n       :records))\n\n(defn delete-opp!\n  [salesforce opp]\n  (sf/request salesforce\n              {:uri    (-&gt; opp :attributes :url)\n               :method :delete}))\n\n(defn delete-opps!\n  [{:keys [salesforce]} opps]\n  (let [futures (doall (map #(future (delete-opp! salesforce %)) opps))]\n    (doseq [f futures] @f)\n    true))\n\n(defn create-opp!\n  [rfqa record]\n  (sf/request (:salesforce rfqa)\n              {:uri    \&quot;/services/data/v33.0/sobjects/Opportunity\&quot;\n               :method :post\n               :body   record}))\n\n(defn get-old-sfids\n  [{:keys [salesforce]}])\n\n(defrecord RainforestQA [salesforce]\n  bidi/RouteProvider\n  (routes [this]\n    [\&quot;/\&quot; {\&quot;rainforest-hook\&quot;\n          (fn [_] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n                        teste (prn \&quot;RFQA\&quot;)\n\n                        ;; delete\n                        _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                                  [\&quot;001i000001R5ls2\&quot;\n                                                   \&quot;001i000001R5mXg\&quot;])\n                               (delete-opps! (rfqa)))\n\n                        teste (prn \&quot;DELETE\&quot;)\n\n                        ;; create\n                        id (:id (create-opp! (rfqa)\n                                             (second seed-data)))]\n\n                    teste (prn \&quot;CREATE\&quot;)\n\n\n                    @(http/request\n                       {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                        :method  :put\n                        :as      :text\n                        :insecure? true\n                        :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                  \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                  \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                        :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                          :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n\n                    (prn \&quot;SUCCESS\&quot;)\n\n                    ))}]))\n\n\n(defn new-hook []\n  (map-&gt;RainforestQA {}))\n\n\n(comment\n  (def rfqa #(:rainforest-hook reloaded.repl/system))\n\n  ;; delete\n  (-&gt;&gt; (opps-for-accounts (rfqa)\n                          [\&quot;001i000001R5ls2\&quot;\n                           \&quot;001i000001R5mXg\&quot;])\n       (delete-opps! (rfqa)))\n\n  ;; create\n  (def id (:id (create-opp! (rfqa)\n                            (second seed-data))))\n\n  @(http/request\n     {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n      :method  :put\n      :as      :text\n      :insecure? true\n      :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n      :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                        :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n\n  )\n&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          teste (prn \&quot;CREATE\&quot;)\n\n\n          @(http/request\n             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n              :method  :put\n              :as      :text\n              :insecure? true\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          teste (prn \&quot;ID: \&quot; id)\n\n\n          @(http/request\n             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n              :method  :put\n              :as      :text\n              :insecure? true\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          teste (prn \&quot;ID: \&quot; id)\n\n\n          @(http/request\n             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n              :method  :put\n              :as      :text\n              :insecure? true\n              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n\n          ))&quot; &quot;(def id (:id (create-opp! (rfqa)\n                          (second seed-data))))&quot; &quot;@(http/request\n   {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n    :method  :put\n    :as      :text\n    :insecure? true\n    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n              \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n    :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                      :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          teste (prn id)\n\n          (while (= \&quot;Not implemented\&quot; (:body resp))\n            (let [resp @(http/request\n                          {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                           :method  :put\n                           :as      :text\n                           :insecure? true\n                           :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                     \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                     \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                           :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                             :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n              resp))\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defmacro do-while\n  [test &amp; body]\n  `(loop []\n     ~@body\n     (when ~test\n       (recur))))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          teste (prn id)\n\n          (do-while (= \&quot;Not implemented\&quot; (:body resp))\n                    (let [resp @(http/request\n                                  {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                                   :method  :put\n                                   :as      :text\n                                   :insecure? true\n                                   :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                             \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                             \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                                   :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                     :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n                      resp))\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; Delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; Create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))\n\n              ;; Assign\n              resp @(http/request\n                      {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                       :method  :put\n                       :as      :text\n                       :insecure? true\n                       :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                 \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                 \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                       :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                         :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n\n          teste (prn id)\n\n          (while (= \&quot;Not implemented\&quot; (:body resp))\n            (let [resp @(http/request\n                          {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                           :method  :put\n                           :as      :text\n                           :insecure? true\n                           :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                     \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                     \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                           :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                             :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n              resp))\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; Delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; Create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))\n\n              ;; Assign\n              resp @(http/request\n                      {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                       :method  :put\n                       :as      :text\n                       :insecure? true\n                       :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                 \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                 \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                       :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                         :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n\n           (prn id)\n\n           (prn resp)\n           \n          (while (= \&quot;Not implemented\&quot; (:body resp))\n            (let [resp @(http/request\n                          {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                           :method  :put\n                           :as      :text\n                           :insecure? true\n                           :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                     \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                     \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                           :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                             :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n              (prn resp)\n              resp))\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; Delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; Create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))\n\n              ;; Assign\n              resp @(http/request\n                      {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                       :method  :put\n                       :as      :text\n                       :insecure? true\n                       :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                 \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                 \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                       :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                         :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n\n           (prn id)\n\n           (prn (:body resp))\n           \n          (while (= \&quot;Not implemented\&quot; (:body resp))\n            (let [resp @(http/request\n                          {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                           :method  :put\n                           :as      :text\n                           :insecure? true\n                           :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                     \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                     \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                           :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                             :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n              (prn (:body resp))\n              resp))\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; Delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; Create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))\n\n              ;; Assign\n              resp @(http/request\n                      {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                       :method  :put\n                       :as      :text\n                       :insecure? true\n                       :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                 \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                 \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                       :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                         :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n\n           (prn id)\n\n           (prn (:body resp))\n           \n          (while (= \&quot;Not implemented.\&quot; (:body resp))\n            (let [resp @(http/request\n                          {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                           :method  :put\n                           :as      :text\n                           :insecure? true\n                           :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                     \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                     \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                           :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                             :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n              (prn (:body resp))\n              resp))\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [org.httpkit.client :as http]))\n\n(defn seed-opp\n  [name account-id]\n  {:Name                                 name\n   :AccountId                            account-id\n   :StageName                            \&quot;In Play\&quot;\n   :CloseDate                            (java.util.Date.)\n   :First_Meeting_Date__c                (java.util.Date.)\n   :First_Meeting_Time__c                \&quot;9:00AM\&quot;\n   :First_Meeting_Time_Zone__c           \&quot;ET\&quot;\n   :Use_Rest_Address_for_Mtg_Location__c true\n   :Current_Offer_Status__c              \&quot;Sent\&quot;\n   :Current_Offer_Vendor__c              \&quot;a00i000000YGt0H\&quot;\n   :Vendor__c                            \&quot;a00i000000YGt0H\&quot;})\n\n(def seed-data\n  [(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)\n\n   (seed-opp \&quot;Boise Test\&quot; \&quot;001i000001R5mXg\&quot;)])\n\n(defn soql-in\n  [xs]\n  (-&gt;&gt; (seq xs)\n       (map #(str \&quot;'\&quot; % \&quot;'\&quot;))\n       (str/join \&quot;, \&quot;)\n       (format \&quot;(%s)\&quot;)))\n\n(defn query\n  [salesforce query]\n  (sf/request\n    salesforce\n    {:uri \&quot;/services/data/v33.0/query\&quot;\n     :query-params\n          {\&quot;q\&quot; query}}))\n\n(defn opps-for-accounts-q\n  [accounts]\n  (format\n    \&quot;SELECT Id\n     FROM Opportunity\n     WHERE AccountId IN %s\&quot;\n    (soql-in accounts)))\n\n(defn opps-for-accounts\n  [{:keys [salesforce]} accounts]\n  (-&gt;&gt; (query salesforce\n              (opps-for-accounts-q accounts))\n       :records))\n\n(defn delete-opp!\n  [salesforce opp]\n  (sf/request salesforce\n              {:uri    (-&gt; opp :attributes :url)\n               :method :delete}))\n\n(defn delete-opps!\n  [{:keys [salesforce]} opps]\n  (let [futures (doall (map #(future (delete-opp! salesforce %)) opps))]\n    (doseq [f futures] @f)\n    true))\n\n(defn create-opp!\n  [rfqa record]\n  (sf/request (:salesforce rfqa)\n              {:uri    \&quot;/services/data/v33.0/sobjects/Opportunity\&quot;\n               :method :post\n               :body   record}))\n\n(defn get-old-sfids\n  [{:keys [salesforce]}])\n\n(defrecord RainforestQA [salesforce]\n  bidi/RouteProvider\n  (routes [this]\n    [\&quot;/\&quot; {\&quot;rainforest-hook\&quot;\n          (fn [_] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n                        teste (prn \&quot;RFQA\&quot;)\n\n                        ;; Delete\n                        _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                                  [\&quot;001i000001R5ls2\&quot;\n                                                   \&quot;001i000001R5mXg\&quot;])\n                               (delete-opps! (rfqa)))\n\n                        teste (prn \&quot;DELETE\&quot;)\n\n                        ;; Create\n                        id (:id (create-opp! (rfqa)\n                                             (second seed-data)))]\n\n                    (prn id)\n\n                    ;; Assign\n                    (loop [resp   @(http/request\n                                     {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                                      :method  :put\n                                      :as      :text\n                                      :insecure? true\n                                      :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                                \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                                \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                                      :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                        :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n                      (if (not (= \&quot;Not implemented.\&quot; (:body resp)))\n                        resp\n                        (do (prn (:body resp))\n                            (recur  @(http/request\n                                       {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                                        :method  :put\n                                        :as      :text\n                                        :insecure? true\n                                        :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                                  \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                                  \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                                        :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                          :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})))))\n\n                    (prn \&quot;SUCCESS\&quot;)\n\n                    ))}]))\n\n\n(defn new-hook []\n  (map-&gt;RainforestQA {}))\n\n\n(comment\n  (def rfqa #(:rainforest-hook reloaded.repl/system))\n\n  ;; delete\n  (-&gt;&gt; (opps-for-accounts (rfqa)\n                          [\&quot;001i000001R5ls2\&quot;\n                           \&quot;001i000001R5mXg\&quot;])\n       (delete-opps! (rfqa)))\n\n  ;; create\n  (def id (:id (create-opp! (rfqa)\n                            (second seed-data))))\n\n  @(http/request\n     {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n      :method  :put\n      :as      :text\n      :insecure? true\n      :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n      :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                        :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})\n\n  )\n&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; Delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; Create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))]\n\n          (prn id)\n\n          ;; Assign\n          (loop [resp   @(http/request\n                           {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                            :method  :put\n                            :as      :text\n                            :insecure? true\n                            :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                      \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                      \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                            :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                              :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n            (if (not (= \&quot;Not implemented.\&quot; (:body resp)))\n              resp\n              (do (prn (:body resp))\n                  (recur  @(http/request\n                             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                              :method  :put\n                              :as      :text\n                              :insecure? true\n                              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})))))\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              teste (prn \&quot;RFQA\&quot;)\n\n              ;; Delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              teste (prn \&quot;DELETE\&quot;)\n\n              ;; Create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))\n\n              ;; Assign\n              resp\n              (loop [resp   @(http/request\n                               {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                                :method  :put\n                                :as      :text\n                                :insecure? true\n                                :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                          \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                          \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                                :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                  :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n                (if (not (= \&quot;Not implemented.\&quot; (:body resp)))\n                  (do\n                    (prn resp))\n                  (do (prn (:body resp))\n                      (recur  @(http/request\n                                 {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                                  :method  :put\n                                  :as      :text\n                                  :insecure? true\n                                  :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                            \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                            \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                                  :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                    :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})))))]\n\n          (prn id)\n\n          (prn resp)\n\n          (prn \&quot;SUCCESS\&quot;)\n\n          ))&quot; &quot;(def rfqa #(:rainforest-hook reloaded.repl/system))\n&quot; &quot;(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)&quot; &quot;(defn tester [] (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n              ;; Delete\n              _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                        [\&quot;001i000001R5ls2\&quot;\n                                         \&quot;001i000001R5mXg\&quot;])\n                     (delete-opps! (rfqa)))\n\n              ;; Create\n              id (:id (create-opp! (rfqa)\n                                   (second seed-data)))\n\n              ;; Assign\n              resp\n              (loop [resp   @(http/request\n                               {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                                :method  :put\n                                :as      :text\n                                :insecure? true\n                                :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                          \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                          \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                                :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                  :managerSfid \&quot;003i0000020FtpIAAS\&quot;})})]\n                (if (not (= \&quot;Not implemented.\&quot; (:body resp)))\n                  resp\n                  (recur  @(http/request\n                             {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;id)\n                              :method  :put\n                              :as      :text\n                              :insecure? true\n                              :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                                        \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                                        \&quot;cookie\&quot;       (:creds (:msg-auth (rfqa)))}\n                              :body    (pr-str {:coordinatorSfid \&quot;003i0000020FtpIAAS\&quot;\n                                                :managerSfid \&quot;003i0000020FtpIAAS\&quot;})}))))]\n          resp))&quot; &quot;(tester)&quot; &quot;(-&gt;&gt; (opps-for-accounts (rfqa)\n                        [\&quot;001i000001R5ls2\&quot;\n                         \&quot;001i000001R5mXg\&quot;])\n     (delete-opps! (rfqa)))&quot; &quot;rfqa #(:rainforest-hook reloaded.repl/system)&quot; &quot;(ns msg-ops.components.rainforestqa\n  (:require [bidi.bidi :as bidi]\n            [clojure.string :as str]\n            [msg-ops.components.salesforce :as sf]\n            [org.httpkit.client :as http]))\n\n(defn seed-opp\n  [name account-id]\n  {:Name                                 name\n   :AccountId                            account-id\n   :StageName                            \&quot;In Play\&quot;\n   :CloseDate                            (java.util.Date.)\n   :First_Meeting_Date__c                (java.util.Date.)\n   :First_Meeting_Time__c                \&quot;9:00AM\&quot;\n   :First_Meeting_Time_Zone__c           \&quot;ET\&quot;\n   :Use_Rest_Address_for_Mtg_Location__c true\n   :Current_Offer_Status__c              \&quot;Sent\&quot;\n   :Current_Offer_Vendor__c              \&quot;a00i000000YGt0H\&quot;\n   :Vendor__c                            \&quot;a00i000000YGt0H\&quot;})\n\n(def seed-data\n  [(seed-opp \&quot;Baltimore Grill TEST\&quot; \&quot;001i000001R5ls2\&quot;)\n\n   (seed-opp \&quot;Boise Test\&quot; \&quot;001i000001R5mXg\&quot;)\n\n   ;(seed-opp \&quot;Portland Test\&quot; \&quot;001i000001R5b3uAAB\&quot;)\n   ])\n\n(defn soql-in\n  [xs]\n  (-&gt;&gt; (seq xs)\n       (map #(str \&quot;'\&quot; % \&quot;'\&quot;))\n       (str/join \&quot;, \&quot;)\n       (format \&quot;(%s)\&quot;)))\n\n(defn query\n  [salesforce query]\n  (sf/request\n    salesforce\n    {:uri \&quot;/services/data/v33.0/query\&quot;\n     :query-params\n          {\&quot;q\&quot; query}}))\n\n(defn opps-for-accounts-q\n  [accounts]\n  (format\n    \&quot;SELECT Id\n     FROM Opportunity\n     WHERE AccountId IN %s\&quot;\n    (soql-in accounts)))\n\n(defn opps-for-accounts\n  [{:keys [salesforce]} accounts]\n  (-&gt;&gt; (query salesforce\n              (opps-for-accounts-q accounts))\n       :records))\n\n(defn delete-opp!\n  [salesforce opp]\n  (sf/request salesforce\n              {:uri    (-&gt; opp :attributes :url)\n               :method :delete}))\n\n(defn delete-opps!\n  [{:keys [salesforce]} opps]\n  (let [futures (doall (map #(future (delete-opp! salesforce %)) opps))]\n    (doseq [f futures] @f)\n    true))\n\n(defn create-opp!\n  [rfqa record]\n  (sf/request (:salesforce rfqa)\n              {:uri    \&quot;/services/data/v33.0/sobjects/Opportunity\&quot;\n               :method :post\n               :body   record}))\n\n(defn get-old-sfids\n  [{:keys [salesforce]}])\n\n(defn assign-vp\n  [rfqa\n   opp-id\n   vp-id]\n  (loop [resp   @(http/request\n                   {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;opp-id)\n                    :method  :put\n                    :as      :text\n                    :insecure? true\n                    :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                              \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                              \&quot;cookie\&quot;       (:creds (:msg-auth rfqa))}\n                    :body    (pr-str {:coordinatorSfid vp-id\n                                      :managerSfid vp-id})})]\n    (if (not (= \&quot;Not implemented.\&quot; (:body resp)))\n      resp\n      (recur  @(http/request\n                 {:url     (str \&quot;https://api.magicfaster.com/v2/opportunities/\&quot;opp-id)\n                  :method  :put\n                  :as      :text\n                  :insecure? true\n                  :headers {\&quot;Content-Type\&quot; \&quot;application/edn\&quot;\n                            \&quot;Accept\&quot;       \&quot;application/edn\&quot;\n                            \&quot;cookie\&quot;       (:creds (:msg-auth rfqa))}\n                  :body    (pr-str {:coordinatorSfid vp-id\n                                    :managerSfid vp-id})})))))\n\n\n(defn build-test\n  []\n  (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n        ;; Delete\n        _ (-&gt;&gt; (opps-for-accounts (rfqa)\n                                  [\&quot;001i000001R5ls2\&quot;\n                                   \&quot;001i000001R5mXg\&quot;])\n               (delete-opps! (rfqa)))\n\n        ;; Create\n        ;; - Baltimore Grill Test\n        baltimore-id (:id (create-opp! (rfqa)\n                                       seed-data))\n        ;; - Portland\n        portland-id (:id (create-opp! (rfqa)\n                                      (second seed-data)))\n\n        ;; Assign\n        baltimore-resp (assign-vp  (rfqa)\n                                   baltimore-id\n                                   \&quot;003i0000020FtpIAAS\&quot;)\n\n        portland-resp  (assign-vp (rfqa)\n                                  portland-id\n                                  \&quot;003i0000020FtpIAAS\&quot;)]\n\n    {:status (str \&quot;Baltimore Test: \&quot;(:status baltimore-resp) \&quot;&lt;br&gt;&lt;br&gt;\&quot;\n                  \&quot;Portland Test: \&quot; (:status portland-resp))\n     :headers {\&quot;content-type\&quot; \&quot;html\&quot;}\n     :body (str \&quot;Baltimore Test: \&quot;(:body baltimore-resp) \&quot;&lt;br&gt;&lt;br&gt;\&quot;\n                \&quot;Portland Test: \&quot; (:body portland-resp))}))\n\n(defn tear-down\n  []\n  (let [rfqa #(:rainforest-hook reloaded.repl/system)\n\n        ;; Delete\n        del-resp (-&gt;&gt; (opps-for-accounts (rfqa)\n                                         [\&quot;001i000001R5ls2\&quot;\n                                          \&quot;001i000001R5mXg\&quot;])\n                      (delete-opps! (rfqa)))]\n    {:status 201\n     :headers {\&quot;content-type\&quot; \&quot;html\&quot;}\n     :body (if (true? del-resp)\n             \&quot;Successful Clean Up\&quot;\n             \&quot;Failed Clean Up\&quot;)}))\n\n(defrecord RainforestQA [salesforce]\n  bidi/RouteProvider\n  (routes [this]\n    [\&quot;/\&quot; {\&quot;rainforest-hook\&quot;\n          (fn [{:keys [params] :as req}]\n            (if (= \&quot;before_run\&quot; (:callback_type params))\n              (build-test)\n              (tear-down)))}]))\n\n(defn new-hook []\n  (map-&gt;RainforestQA {}))&quot; &quot;(def rfqa #(:rainforest-hook reloaded.repl/system))&quot; &quot;(:id (create-opp! (rfqa)\n                  (second seed-data)))&quot; &quot;(:id (create-opp! (rfqa)\n                  seed-data))&quot; &quot;(:id (create-opp! (rfqa)\n                  (first seed-data)))&quot; &quot;(ns user\n  (:require [reloaded.repl :refer [system init start stop go reset]]\n            [msg-ops.system :refer [prod-system]]))\n\n(defn init\n  []\n  (reloaded.repl/set-init! prod-system))\n\n(defn reset\n  []\n  (reloaded.repl/reset))&quot; &quot;(reset)&quot; &quot;(ns msg-ops.core\n  #_(:require [aleph.http :as http])\n  (:gen-class))\n\n(defn start-system\n  [config]\n  (println \&quot;Starting msg-ops\&quot;)\n\n  (reloaded.repl/set-init! prod-system)\n\n  (println \&quot;System started\&quot;)\n  (println \&quot;Ready...\&quot;))\n\n(defn -main\n  []\n  (prn \&quot;Test\&quot;)\n  )\n\n#_(defn -main [&amp; [command]]\n  (condp = command\n    \&quot;start\&quot;\n    (do\n      (http/start-server handler {:port 8080})\n      (println \&quot;Server started.\&quot;))\n\n    \&quot;test-print\&quot;\n    (println \&quot;Hello world\&quot;)))\n\n\n\n\n#_(defn -main [&amp; args]\n  (let [{:keys [arguments]} (parse-opts args nil)\n        config (nomad/read-config (io/resource \&quot;config.edn\&quot;))]\n    (try\n      (match [arguments]\n             [[\&quot;start-system\&quot;]]\n             (start-system config))\n      (catch Exception e\n        (let [{:keys [cb/token cb/environment]} config]\n          (when (and token environment)\n            (let [rollbar (cb/rollbar token environment)]\n              (rollbar e \&quot;critical\&quot;)))\n          (throw e))))))\n&quot; &quot;(ns msg-ops.core\n  (:require [reloaded.repl :refer [system init start stop go reset]]\n            [msg-ops.system :refer [prod-system]])\n  (:gen-class))\n\n(defn start-system\n  []\n  (println \&quot;Starting msg-ops\&quot;)\n\n  (reloaded.repl/set-init! prod-system)\n  (reloaded.repl/reset)\n\n  (println \&quot;System started\&quot;)\n  (println \&quot;Ready...\&quot;))\n\n(defn -main\n  []\n  (start-system))\n\n#_(defn -main [&amp; [command]]\n  (condp = command\n    \&quot;start\&quot;\n    (do\n      (http/start-server handler {:port 8080})\n      (println \&quot;Server started.\&quot;))\n\n    \&quot;test-print\&quot;\n    (println \&quot;Hello world\&quot;)))\n\n\n\n\n#_(defn -main [&amp; args]\n  (let [{:keys [arguments]} (parse-opts args nil)\n        config (nomad/read-config (io/resource \&quot;config.edn\&quot;))]\n    (try\n      (match [arguments]\n             [[\&quot;start-system\&quot;]]\n             (start-system config))\n      (catch Exception e\n        (let [{:keys [cb/token cb/environment]} config]\n          (when (and token environment)\n            (let [rollbar (cb/rollbar token environment)]\n              (rollbar e \&quot;critical\&quot;)))\n          (throw e))))))\n&quot; &quot;(com.stuartsierra.component/start prod-system)&quot; &quot;(ns msg-ops.core\n  (:require [reloaded.repl :refer [system init start stop go reset]]\n            [msg-ops.system :refer [prod-system]])\n  (:gen-class))\n\n(defn start-system\n  []\n  (println \&quot;Starting msg-ops\&quot;)\n  (com.stuartsierra.component/start-system prod-system)\n  (println \&quot;System started\&quot;)\n  (println \&quot;Ready...\&quot;))\n\n(defn -main\n  []\n  (start-system))\n\n&quot; &quot;(reloaded.repl/set-init! prod-system)&quot; &quot;(reloaded.repl/reset)&quot; &quot;prod-system&quot; &quot;(:salesforce prod-system)&quot; &quot;(alter-var-root prod-system com.stuartsierra.component/start-system)&quot; &quot;(alter-var-root #'prod-system com.stuartsierra.component/stop)\n&quot; &quot;(alter-var-root #'prod-system com.stuartsierra.component/start)\n&quot; &quot;(alter-var-root #'prod-system com.stuartsierra.component/start-system)\n&quot;], :remote []}}</component>
</project>